using CLUNL.DirectedIO;
using System;

namespace CLUNL.Diagnosis
{
    /// <summary>
    /// Client of debugger
    /// </summary>
    public class DebuggerClient
    {
        IBaseWR baseWR;
        bool isDisposed = false;
        bool isPaused = false;
        /// <summary>
        /// Temporarily stop log messages.
        /// </summary>
        public void Pause()
        {
            isPaused = true;
        }
        /// <summary>
        /// Resume logging messages.
        /// </summary>
        public void Resume()
        {
            isPaused = false;
        }
        /// <summary>
        /// The only public client.
        /// </summary>
        public static DebuggerClient CurrentClient;
        /// <summary>
        /// Make sure only one Client at one time.
        /// </summary>
        /// <param name="clientProfile"></param>
        /// <param name="Path"></param>
        public static void Init(IBaseWR baseWR)
        {
            if (CurrentClient != null)
                if (CurrentClient.isDisposed == true)
                    CurrentClient.Dispose();
            CurrentClient = new DebuggerClient();
            CurrentClient.baseWR = baseWR;
            CurrentClient.Init();
        }
        /// <summary>
        /// Real initializer.
        /// </summary>
        private void Init()
        {
            baseWR.WriteLine($"{DateTime.Now}>S[Init");
            baseWR.WriteLine($"#Log Generated By CLUNL.Diagnosis");
        }
        /// <summary>
        /// Write the end line of the log and close WR.
        /// </summary>
        private void Dispose()
        {
            baseWR.WriteLine($">S[End");
            baseWR.Flush();
            baseWR.Dispose();
            isDisposed = true;
        }
        /// <summary>
        /// Log a message to target file/memory.
        /// </summary>
        /// <param name="Message"></param>
        /// <param name="logLevel"></param>
        public void Log(string Message, LogLevel logLevel= LogLevel.Default)
        {
            if (isPaused == true) return;
            string FinalMessage = $"{DateTime.Now}>";
            switch (logLevel)
            {
                case LogLevel.Default:
                    FinalMessage += "D[";
                    break;
                case LogLevel.Normal:
                    FinalMessage += "N[";
                    break;
                case LogLevel.Warning:
                    FinalMessage += "W[";
                    break;
                case LogLevel.Error:
                    FinalMessage += "E[";
                    break;
                case LogLevel.Important:
                    FinalMessage += "I[";
                    break;
                default:
                    break;
            }
            FinalMessage += Message;
            baseWR.WriteLine(FinalMessage);
        }
    }
    public enum LogLevel
    {
        Default,Normal,Warning,Error,Important
    }
    /// <summary>
    /// R0 - Less readable, R0 - More Readable
    /// </summary>
    public enum LogInfoProfile
    {
        R0,R1
    }
}
