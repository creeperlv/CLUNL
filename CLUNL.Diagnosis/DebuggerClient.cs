using CLUNL.Data.Layer0.Buffers;
using CLUNL.DirectedIO;
using System;

namespace CLUNL.Diagnosis
{
    /// <summary>
    /// Client of debugger
    /// </summary>
    public class DebuggerClient
    {
        IBaseWR baseWR;
        bool isDisposed = false;
        bool isPaused = false;
        LogInfoProfile Profile;
        /// <summary>
        /// Temporarily stop log messages.
        /// </summary>
        public void Pause()
        {
            isPaused = true;
        }
        /// <summary>
        /// Resume logging messages.
        /// </summary>
        public void Resume()
        {
            isPaused = false;
        }
        /// <summary>
        /// The only public client.
        /// </summary>
        public static DebuggerClient CurrentClient;
        /// <summary>
        /// Make sure only one Client at one time.
        /// </summary>
        /// <param name="clientProfile"></param>
        /// <param name="Path"></param>
        public static void Init(IBaseWR baseWR, LogInfoProfile Profile)
        {
            if (CurrentClient != null)
                if (CurrentClient.isDisposed == true)
                    CurrentClient.Dispose();
            CurrentClient = new DebuggerClient();
            CurrentClient.baseWR = baseWR;
            CurrentClient.Profile = Profile;
            CurrentClient.Init();
        }
        /// <summary>
        /// Real initializer.
        /// </summary>
        private void Init()
        {
            switch (Profile)
            {
                case LogInfoProfile.R0:
                    break;
                case LogInfoProfile.R1:
                    baseWR.WriteLine($"{DateTime.Now}>S[Init");
                    baseWR.WriteLine($"#Log Generated By CLUNL.Diagnosis");
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// Write the end line of the log and close WR.
        /// </summary>
        private void Dispose()
        {
            baseWR.WriteLine($">S[End");
            baseWR.Flush();
            baseWR.Dispose();
            isDisposed = true;
        }
        /// <summary>
        /// Log a message to target file/memory.
        /// </summary>
        /// <param name="Message"></param>
        /// <param name="logLevel"></param>
        public void Log(string Message, LogLevel logLevel = LogLevel.Default)
        {
            
            if (isPaused == true) return;
            switch (Profile)
            {
                case LogInfoProfile.R0:
                    {
                        DataBuffer dataBuffer = new DataBuffer();
                        switch (logLevel)
                        {
                            case LogLevel.Default:
                                baseWR.WriteBytes(OperatorList.MSG_D, 4, 0);
                                break;
                            case LogLevel.Normal:
                                baseWR.WriteBytes(OperatorList.MSG_N, 4, 0);
                                break;
                            case LogLevel.Warning:
                                baseWR.WriteBytes(OperatorList.MSG_W, 4, 0);
                                break;
                            case LogLevel.Error:
                                baseWR.WriteBytes(OperatorList.MSG_E, 4, 0);
                                break;
                            case LogLevel.Important:
                                baseWR.WriteBytes(OperatorList.MSG_I, 4, 0);
                                break;
                            default:
                                break;
                        }
                        baseWR.Flush();
                        var Now = DateTime.Now;
                        DataBuffer TimeBytes = new DataBuffer();
                        TimeBytes.WriteInt(Now.Year);
                        TimeBytes.WriteInt(Now.Month);
                        TimeBytes.WriteInt(Now.Day);
                        TimeBytes.WriteInt(Now.Hour);
                        TimeBytes.WriteInt(Now.Minute);
                        TimeBytes.WriteInt(Now.Second);
                        TimeBytes.WriteInt(Now.Millisecond);
                        baseWR.WriteBytes(TimeBytes, TimeBytes.Length, 0);

                    }
                    break;
                case LogInfoProfile.R1:
                    {
                        string FinalMessage = $"{DateTime.Now}>";
                        switch (logLevel)
                        {
                            case LogLevel.Default:
                                FinalMessage += "D[";
                                break;
                            case LogLevel.Normal:
                                FinalMessage += "N[";
                                break;
                            case LogLevel.Warning:
                                FinalMessage += "W[";
                                break;
                            case LogLevel.Error:
                                FinalMessage += "E[";
                                break;
                            case LogLevel.Important:
                                FinalMessage += "I[";
                                break;
                            default:
                                break;
                        }
                        FinalMessage += Message;
                        baseWR.WriteLine(FinalMessage);
                    }
                    break;
                default:
                    break;
            }
            
        }
    }
    public enum LogLevel
    {
        Default, Normal, Warning, Error, Important
    }
    /// <summary>
    /// R0 - Less readable, R0 - More Readable
    /// </summary>
    public enum LogInfoProfile
    {
        R0, R1
    }
    /// <summary>
    /// List of operators.
    /// </summary>
    public static class OperatorList
    {
        /// <summary>
        /// Message: Initialization.
        /// </summary>
        public readonly static byte[] MSG_INIT = { 0, 0, 0, 0 };
        /// <summary>
        /// Message: End of the log.
        /// </summary>
        public readonly static byte[] MSG_END = { 0, 0, 0, 1 };
        /// <summary>
        /// Message: Log, Default.
        /// </summary>
        public readonly static byte[] MSG_D = { 0, 0, 1, 0 };
        /// <summary>
        /// Message: Log, Normal.
        /// </summary>
        public readonly static byte[] MSG_N = { 0, 0, 1, 1 };
        /// <summary>
        /// Message: Log, Warning.
        /// </summary>
        public readonly static byte[] MSG_W = { 0, 0, 1, 2 };
        /// <summary>
        /// Message: Log, Error.
        /// </summary>
        public readonly static byte[] MSG_E = { 0, 0, 1, 3 };
        /// <summary>
        /// Message: Log, Important.
        /// </summary>
        public readonly static byte[] MSG_I = { 0, 0, 1, 4 };
    }
}
